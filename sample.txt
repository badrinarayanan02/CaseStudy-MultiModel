import os
import pandas as pd
import numpy as np
import nltk
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from sklearn.feature_extraction.text import TfidfVectorizer
import cv2

# Download NLTK stopwords
nltk.download('stopwords')
nltk.download('punkt')

# Read styles.csv
styles_df = pd.read_csv("path/to/styles.csv")

# Text preprocessing
def preprocess_text(text):
    # Tokenization
    tokens = word_tokenize(text)
    
    # Remove stopwords
    stop_words = set(stopwords.words('english'))
    filtered_tokens = [word for word in tokens if word.lower() not in stop_words]
    
    # Convert to lowercase
    filtered_tokens = [word.lower() for word in filtered_tokens]
    
    # Join tokens back into a string
    preprocessed_text = ' '.join(filtered_tokens)
    
    return preprocessed_text

# Apply text preprocessing to 'productDisplayName' column
styles_df['processed_text'] = styles_df['productDisplayName'].apply(preprocess_text)

# Convert text to numerical representations using TF-IDF
tfidf_vectorizer = TfidfVectorizer()
tfidf_matrix = tfidf_vectorizer.fit_transform(styles_df['processed_text'])

# Image preprocessing
def preprocess_image(image_path, target_size=(224, 224)):
    try:
        # Read and resize image
        img = cv2.imread(image_path)
        img = cv2.resize(img, target_size)
        
        # Normalize image
        img = img / 255.0
        
        return img
    except Exception as e:
        print(f"Error preprocessing image {image_path}: {str(e)}")
        return None

# Image directory containing all the images
image_dir = "path/to/image_directory"

# Preprocess images in the directory
image_arrays = []
for image_file in os.listdir(image_dir):
    image_path = os.path.join(image_dir, image_file)
    image_array = preprocess_image(image_path)
    if image_array is not None:
        image_arrays.append(image_array)

# Convert image arrays to numpy array
image_arrays = np.array(image_arrays)

# Display the shapes of the TF-IDF matrix and image array
print("TF-IDF matrix shape:", tfidf_matrix.shape)
print("Image array shape:", image_arrays.shape)

# New Preprocess

def preprocessText(text):
    try:
        tokens = word_tokenize(str(text))  # Ensure text is converted to string
        stop_words = set(stopwords.words('english'))
        filtered_tokens = [word for word in tokens if word.lower() not in stop_words]
        return ' '.join(filtered_tokens)
    except Exception as e:
        print(f"Error preprocessing text: {e}")
        return ''  # Return empty string or handle the error appropriately

def extract_visual_features(images):
    # Resize images to meet the input size requirement of VGG16 (minimum 32x32 pixels)
    resized_images = tf.image.resize(images, (32, 32))
    
    # Normalize image data
    resized_images = resized_images / 255.0
    
    # Load pre-trained VGG16 model (excluding top layer)
    base_model = VGG16(weights='imagenet', include_top=False, input_shape=(32, 32, 3))
    
    # Create a new model by adding a global average pooling layer
    output = base_model.layers[-1].output
    output = tf.keras.layers.GlobalAveragePooling2D()(output)
    vgg_model = Model(inputs=base_model.input, outputs=output)
    
    # Extract features from VGG16 model
    visual_features = vgg_model.predict(resized_images)
    
    return visual_features


